package net.myplayplanet.querygenerator.api;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;

/**
 * This class is to make it easy to get the Method via name.
 * <p>
 * IMPORTANT: Because it is nearly impossible to reverse Engenier the changes that can be made via the Custom Functions, the Method "getName" must be called at least once on Classes, Fields or Methods that take the default for this to work.
 */
public class ReverseFieldTranslator extends FieldTranslator {

    HashMap<String, Field> fields;
    HashMap<String, Method> methods;
    HashMap<String, Class> classes;

    public ReverseFieldTranslator(FallbackType fallbackType) {
        super(fallbackType);
        fields = new HashMap<>();
        methods = new HashMap<>();
        classes = new HashMap<>();
    }

    /**
     * IMPORTANT: {@link ReverseFieldTranslator}
     * @param name the name generated by the field translator
     * @return the field.
     */
    public Field getFieldByName(String name) {
        return this.fields.getOrDefault(name, null);
    }

    /**
     * IMPORTANT: {@link ReverseFieldTranslator}
     * @param name the name generated by the field translator
     * @return the method.
     */
    public Method getMethodByName(String name) {
        return this.methods.getOrDefault(name, null);
    }

    /**
     * IMPORTANT: {@link ReverseFieldTranslator}
     * @param name the name generated by the field translator
     * @return the class.
     */
    public Class getClassByName(String name) {
        return this.classes.getOrDefault(name, null);
    }
    /**
     * see {@link FieldTranslator#setName(Class, String)}
     */
    @Override
    public void setName(Class clazz, String newName) {
        this.classes.put(newName, clazz);
        super.setName(clazz, newName);
    }

    /**
     * see {@link FieldTranslator#setName(Field, String)}
     */
    @Override
    public void setName(Field field, String newName) {
        this.fields.put(newName, field);
        super.setName(field, newName);
    }

    /**
     * see {@link FieldTranslator#setName(Method, String)}
     */
    @Override
    public void setName(Method method, String newName) {
        this.methods.put(newName, method);
        super.setName(method, newName);
    }

    /**
     * see {@link FieldTranslator#getName(Class)}
     */
    @Override
    public String getName(Class clazz) {
        String name = super.getName(clazz);
        this.classes.put(name, clazz);
        return name;
    }

    /**
     * see {@link FieldTranslator#getName(Field)}
     */
    @Override
    public String getName(Field field) {
        String name = super.getName(field);
        this.fields.put(name, field);
        return name;
    }

    /**
     * see {@link FieldTranslator#getName(Method)}
     */
    @Override
    public String getName(Method method) {
        String name = super.getName(method);
        this.methods.put(name, method);
        return name;
    }
}
